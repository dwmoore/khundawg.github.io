<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>davemoore.io</title>
    <description>All the things that aggrivated me enough to write for an hour...</description>
    <link>http://khundawg.github.io//</link>
    <atom:link href="http://khundawg.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 24 Jan 2016 18:42:05 -0500</pubDate>
    <lastBuildDate>Sun, 24 Jan 2016 18:42:05 -0500</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Pundit - Part 1</title>
        <description>&lt;p&gt;Pundit is a Ruby gem for managing authorization in Rails. If you need to do
things like allow certain users to access an admin dashboard but prohibit access
to others, you’re in the right place.&lt;/p&gt;

&lt;p&gt;Now, let’s get to it. Shall we?&lt;/p&gt;

&lt;h2 id=&quot;whats-under-the-hood&quot;&gt;What’s Under the Hood?&lt;/h2&gt;

&lt;p&gt;Pundit is all about policies. They define access through a collection of basic 
&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;Policies correspond to your controllers. For example, if you have a 
&lt;code&gt;users_controller.rb&lt;/code&gt; then you’ll probably want a &lt;code&gt;users_policy.rb&lt;/code&gt;. They go
together like peas and carrots.&lt;/p&gt;

&lt;h2 id=&quot;pundit-in-action&quot;&gt;Pundit In Action&lt;/h2&gt;

&lt;p&gt;The access request begins within the controller by calling the &lt;code&gt;authorize&lt;/code&gt;
method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SuppliersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@supplier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@supplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;--- Pundit call to the SupplierPolicy&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# moar controller...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Generally, the only parameter to the &lt;code&gt;authorize&lt;/code&gt; method will be the record you 
are seeking to access.&lt;/p&gt;

&lt;p&gt;Pundit infers three things when &lt;code&gt;authorize(@supplier)&lt;/code&gt; is called.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There is a current_user available&lt;/li&gt;
  &lt;li&gt;There is a &lt;code&gt;SupplierPolicy&lt;/code&gt; (inferred from the @supplier parameter)&lt;/li&gt;
  &lt;li&gt;There is a boolean method of the same name (e.g. &lt;code&gt;show?&lt;/code&gt;) defined within the 
&lt;code&gt;SupplierPolicy&lt;/code&gt; that returns a truthy response.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that information, the &lt;code&gt;authorize&lt;/code&gt; method looks up the correct policy and we
continue the journey…&lt;/p&gt;

&lt;h2 id=&quot;thats-just-the-policy-sir&quot;&gt;That’s Just the Policy Sir&lt;/h2&gt;

&lt;p&gt;Now that we’ve instantiated the correct policy, let’s what we got.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SupplierPolicy&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:record&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;--- This is the current_user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;--- This is the variable @supplier&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;--- See, they match!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;--- Returns true or false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the &lt;code&gt;SupplierPolicy&lt;/code&gt; is initialized we set up an instance variable &lt;code&gt;@user&lt;/code&gt;
with our current_user. We also set the &lt;code&gt;@record&lt;/code&gt; instance variable to our 
&lt;code&gt;@supplier&lt;/code&gt; variable we passed in to the &lt;code&gt;authorize&lt;/code&gt; method call.&lt;/p&gt;

&lt;p&gt;With both the user and record available, we can now run all manner of checks to
see if we should allow a given action to continue.&lt;/p&gt;

&lt;p&gt;In the example, we call the &lt;code&gt;admin?&lt;/code&gt; method on &lt;code&gt;user&lt;/code&gt; (which we set up with the 
attr_reader). The &lt;code&gt;admin?&lt;/code&gt; method should return either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, in 
turn meaning the &lt;code&gt;show?&lt;/code&gt; method will return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: If you use Rails Enums to store your classification attributes, you’ll get 
boolean methods for free. Otherwise, we’ll need to make them ourselves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if the &lt;code&gt;user&lt;/code&gt; is an admin, &lt;code&gt;show?&lt;/code&gt; will be &lt;code&gt;true&lt;/code&gt; and we’ll allow him to 
access the show action. &lt;/p&gt;

&lt;p&gt;You’ll find these types of checks are common in most applications but you can
also have checks based on the record as well. For example, if &lt;code&gt;Supplier&lt;/code&gt; has a
&lt;code&gt;:published&lt;/code&gt; attribute, we may also want something like…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SupplierPolicy&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:record&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;published?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can allow admins to view any supplier record and at the same time allow 
non admin users to only access supplier records that have been published.&lt;/p&gt;

&lt;h2 id=&quot;the-rest-of-the-story&quot;&gt;The Rest of the Story&lt;/h2&gt;

&lt;p&gt;That’s it for today but there’s more to come. In part 2 we will take a look at
scopes and limiting access to lists of records.&lt;/p&gt;

&lt;p&gt;Until then, cheers!&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Nov 2015 00:00:00 -0400</pubDate>
        <link>http://khundawg.github.io//pundit-1</link>
        <guid isPermaLink="true">http://khundawg.github.io//pundit-1</guid>
        
        
        <category>code</category>
        
      </item>
    
  </channel>
</rss>
